{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","operations","emptyGrid","rows","i","push","Array","from","generateCell","g","produce","gridCopy","h","neighbors","forEach","x","y","newI","newH","useState","grid","setGrid","running","setRunning","speed","setSpeed","generation","setGeneration","runningRef","useRef","current","runSimulation","useCallback","setTimeout","generationStep","className","onClick","Math","random","style","display","gridTemplateColumns","alignItems","justifyContent","margin","map","col","key","newGrid","width","height","backgroundColor","border","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f47e661d.chunk.js","sourcesContent":["import React, {useState, useCallback, useRef} from 'react';\nimport produce from 'immer';\nimport './App.scss';\n\nfunction App() {\n  const numRows = 28;\n  const numCols = 28;\n\n  const operations = [\n    [0, 1],\n    [0, -1],\n    [1, -1],\n    [-1, 1],\n    [1, 1],\n    [-1, -1],\n    [1, 0],\n    [-1, 0]\n  ];\n\n  const emptyGrid = () => {\n    const rows = [];\n    for (let i = 0; i < numRows; i++) {\n      rows.push(Array.from(Array(numCols), () => 0))\n    }\n    return rows;\n  }\n\n  const generateCell = (g) => {\n    return produce(g, gridCopy => {\n      for (let i = 0; i < numRows; i++) {\n        for (let h = 0; h < numCols; h++) {\n          let neighbors = 0;\n          operations.forEach(([x, y]) => {\n            const newI = i + x;\n            const newH = h + y;\n            if (newI >= 0 && newI < numRows && newH >= 0 && newH < numCols) {\n              neighbors += g[newI][newH]\n            }\n          })\n          if (neighbors < 2 || neighbors > 3) {\n            gridCopy[i][h] = 0;\n          } else if (g[i][h] === 0 && neighbors === 3) {\n            gridCopy[i][h] = 1;\n          }\n        }\n      }\n    });\n  }\n\n  const [grid, setGrid] = useState(() => {\n    return emptyGrid()\n  });\n\n  const[running, setRunning] = useState(false);\n\n  const [speed, setSpeed] = useState(false);\n\n  const [generation, setGeneration] = useState(0);\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    }\n    setGeneration(generation => generation + 1);\n    setGrid((g) => {\n      return generateCell(g);\n    });    \n    // Utilize a timeout function to build the next generation of cells\n    setTimeout(runSimulation, speed ? 100 : 1000);\n  }, [speed]);\n\n  const generationStep = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    }\n    setGeneration(generation => generation + 1);\n    setGrid((g) => {\n      return generateCell(g);\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Game of Life</h1>\n      <div className=\"desktop-mobile\">\n        <div className=\"left\">\n          <h2>Instructions</h2>\n          <li>Click on any white cell to generate a live green cell.</li>\n          <li>Any live cell with less than 2 neighbors dies.</li>\n          <li>Any live cell with 2 or 3 neighbors lives on to the next generation.</li>\n        {/* Button(s) that start & stop the animation */}\n          <div className=\"button-sec\">\n            <button\n              onClick={() => {\n                setRunning(!running);\n                if (!running) {\n                  runningRef.current = true;\n                  runSimulation();\n                }\n              }}\n            >\n              {running ? 'Stop' : 'Start'}\n            </button>\n            {/* Manually step through the simulation one generation at a time, as opposed to animating automatically */}\n            <button\n              onClick={() => {\n                runningRef.current = true;\n                generationStep();\n              }}\n            >\n              Generate\n            </button>\n            {/* CUSTOM FEATURES #1 Add an option that creates a random cell configuration that users can run */}\n            <button onClick={() => {\n              const rows = [];\n              for (let i = 0; i < numRows; i++) {\n                rows.push(\n                  Array.from(Array(numCols), () => (Math.random() > 0.8 ? 1 : 0)))\n              }\n            \n              setGrid(rows);\n              setGeneration(0);\n            }}>\n              Random\n            </button>\n            {/* CUSTOM FEATURES #2 Allow users to specify the speed of the simulation */}\n            {!speed ? (\n                <button\n                  onClick={() => {\n                    setSpeed(true);\n                  }}\n                > \n                  10x Speed \n                </button>\n              ) : (\n                <button\n                  onClick={() => {\n                    setSpeed(false);\n                  }}\n                >\n                  1x Speed \n                </button>\n              )}\n            {/* Button to clear the grid */}\n            <button onClick={() => {\n              setGrid(emptyGrid());\n              setGeneration(0);\n            }}>\n              Clear\n            </button>\n          </div>\n          <p className=\"generation\">Generations: {generation}</p>\n        </div>\n        {/* Cell objects or components properties*/}\n        <div className =\"right\" \n          style={{\n            display: 'grid',\n            gridTemplateColumns: `repeat(${numCols}, 15px)`,\n            alignItems: 'center',\n            justifyContent: 'center',\n            margin: '0% 0.5%'\n        }}>\n          {grid.map((rows, i) => \n            rows.map((col, h) => \n            <div \n            key={`${i}-${h}`}\n            // Clickable/Tappable\n            onClick={() => {\n              // can be clicked to allow user to setup initial cell configuration\n              const newGrid = produce(grid, gridCopy => {\n                // Toggle state functionality: switch between alive & dead either because user manually toggled cell before starting simulation\n                gridCopy[i][h] = grid[i][h] ? 0 : 1;\n              })\n              setGrid(newGrid);\n            }}\n              style={{\n                width: 15,\n                height: 15, \n                // current state: (alive, dead), (green, white)\n                backgroundColor: grid[i][h] ? 'green' : 'white',\n                border: \"solid 1px black\"\n              }}\n            />\n          ))}\n        </div>\n      </div>\n    </ div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}